
variable "client_id" {
  type    = string
  default = "${env("ARM_CLIENT_ID")}"
}

variable "client_secret" {
  type    = string
  default = "${env("ARM_CLIENT_SECRET")}"
}

variable "environment_id" {
  type    = string
  default = "${env("ARM_ENVIRONMENT_ID")}"
}

variable "image_version" {
  type    = string
  default = "${env("ARM_IMAGE_VERSION")}"
}

variable "subscription_id" {
  type    = string
  default = "${env("ARM_SUBSCRIPTION_ID")}"
}

variable "tenant_id" {
  type    = string
  default = "${env("ARM_TENANT_ID")}"
}

variable "resource_group" {
  type    = string
  default = "${env("RESOURCE_GROUP")}"
}

variable "storage_account" {
  type    = string
  default = "${env("STORAGE_ACCOUNT")}"
}

source "azure-arm" "autogenerated_1" {
  build_resource_group_name = "${var.resource_group}"
  client_id                 = "${var.client_id}"
  client_secret             = "${var.client_secret}"

  communicator    = "winrm"
  image_offer     = "WindowsServer"
  image_publisher = "MicrosoftWindowsServer"
  image_sku       = "2019-Datacenter"

  capture_container_name = "windows"
  capture_name_prefix    = "WindowsServer2019"
  resource_group_name    = "${var.resource_group}"
  storage_account        = "${var.storage_account}"

  os_disk_size_gb = 128
  os_type         = "Windows"

  subscription_id = "${var.subscription_id}"
  tenant_id       = "${var.tenant_id}"
  vm_size         = "Standard_D2_v2"
  winrm_insecure  = true
  winrm_timeout   = "5m"
  winrm_use_ssl   = true
  winrm_username  = "sysadmin"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]

  // install azure cli in windows machine
  provisioner "powershell" {
    inline = [
      "Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi -UseBasicParsing",
      "Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'"
    ]
  }

  provisioner "powershell" {
    inline = ["while ((Get-Service RdAgent).Status -ne 'Running') { Start-Sleep -s 5 }", "while ((Get-Service WindowsAzureGuestAgent).Status -ne 'Running') { Start-Sleep -s 5 }", "& $env:SystemRoot\\System32\\Sysprep\\Sysprep.exe /oobe /generalize /quiet /quit", "while($true) { $imageState = Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\State | Select ImageState; if($imageState.ImageState -ne 'IMAGE_STATE_GENERALIZE_RESEAL_TO_OOBE') { Write-Output $imageState.ImageState; Start-Sleep -s 10  } else { break } }"]
  }

}
